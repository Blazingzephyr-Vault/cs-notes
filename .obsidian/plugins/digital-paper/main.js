/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DigitalPaper
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  enabled: true
};
var oldValue = void 0;
var DigitalPaper = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerEvent(
      this.app.workspace.on(
        "editor-change",
        (editor, view) => {
          if (this.settings.enabled && oldValue !== void 0 && !editor.getValue().startsWith(oldValue)) {
            editor.setValue(oldValue);
          }
          oldValue = editor.getValue();
        }
      )
    );
    this.registerEvent(
      this.app.workspace.on(
        "active-leaf-change",
        (leaf) => {
          if (leaf.view.getViewType() === "markdown") {
            oldValue = leaf.view.editor.getValue();
          }
        }
      )
    );
    this.statusBarElm = this.addStatusBarItem();
    this.displayModeOnStatusBar();
    this.addCommand({
      id: "toggle",
      name: "Toggle digital paper mode",
      callback: () => {
        this.settings.enabled = !this.settings.enabled;
        this.displayModeOnStatusBar();
        this.saveSettings();
      }
    });
  }
  displayModeOnStatusBar() {
    if (this.settings.enabled) {
      this.statusBarElm.setText("paper");
    } else {
      this.statusBarElm.setText("");
    }
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHtcclxuXHRFZGl0b3IsXHJcblx0TWFya2Rvd25WaWV3LFxyXG5cdFBsdWdpbixcclxuXHRXb3Jrc3BhY2VMZWFmLFxyXG59IGZyb20gXCJvYnNpZGlhblwiO1xyXG5cclxuaW50ZXJmYWNlIERpZ2l0YWxQYXBlclNldHRpbmdzIHtcclxuXHRlbmFibGVkOiBib29sZWFuO1xyXG59XHJcblxyXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTOiBEaWdpdGFsUGFwZXJTZXR0aW5ncyA9IHtcclxuXHRlbmFibGVkOiB0cnVlLFxyXG59O1xyXG5cclxubGV0IG9sZFZhbHVlOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEaWdpdGFsUGFwZXIgZXh0ZW5kcyBQbHVnaW4ge1xyXG5cdHNldHRpbmdzOiBEaWdpdGFsUGFwZXJTZXR0aW5ncztcclxuXHRzdGF0dXNCYXJFbG06IEhUTUxFbGVtZW50O1xyXG5cclxuXHRhc3luYyBvbmxvYWQoKSB7XHJcblx0XHRhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xyXG5cclxuXHRcdHRoaXMucmVnaXN0ZXJFdmVudChcclxuXHRcdFx0dGhpcy5hcHAud29ya3NwYWNlLm9uKFxyXG5cdFx0XHRcdFwiZWRpdG9yLWNoYW5nZVwiLFxyXG5cdFx0XHRcdChlZGl0b3I6IEVkaXRvciwgdmlldzogTWFya2Rvd25WaWV3KSA9PiB7XHJcblx0XHRcdFx0XHRpZiAoXHJcblx0XHRcdFx0XHRcdHRoaXMuc2V0dGluZ3MuZW5hYmxlZCAmJlxyXG5cdFx0XHRcdFx0XHRvbGRWYWx1ZSAhPT0gdW5kZWZpbmVkICYmXHJcblx0XHRcdFx0XHRcdCFlZGl0b3IuZ2V0VmFsdWUoKS5zdGFydHNXaXRoKG9sZFZhbHVlKVxyXG5cdFx0XHRcdFx0KSB7XHJcblx0XHRcdFx0XHRcdC8vIHVzZXIgY2hhbmdlZCBleGlzdGluZyB0ZXh0LCByZXZlcnQgdG8gb2xkIHZhbHVlXHJcblx0XHRcdFx0XHRcdGVkaXRvci5zZXRWYWx1ZShvbGRWYWx1ZSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRvbGRWYWx1ZSA9IGVkaXRvci5nZXRWYWx1ZSgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0KVxyXG5cdFx0KTtcclxuXHJcblx0XHR0aGlzLnJlZ2lzdGVyRXZlbnQoXHJcblx0XHRcdHRoaXMuYXBwLndvcmtzcGFjZS5vbihcclxuXHRcdFx0XHRcImFjdGl2ZS1sZWFmLWNoYW5nZVwiLFxyXG5cdFx0XHRcdChsZWFmOiBXb3Jrc3BhY2VMZWFmKSA9PiB7XHJcblx0XHRcdFx0XHRpZiAobGVhZi52aWV3LmdldFZpZXdUeXBlKCkgPT09IFwibWFya2Rvd25cIikge1xyXG5cdFx0XHRcdFx0XHRvbGRWYWx1ZSA9IGxlYWYudmlldy5lZGl0b3IuZ2V0VmFsdWUoKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdClcclxuXHRcdCk7XHJcblxyXG5cdFx0Ly8gVGhpcyBhZGRzIGEgc3RhdHVzIGJhciBpdGVtIHRvIHRoZSBib3R0b20gb2YgdGhlIGFwcC4gRG9lcyBub3Qgd29yayBvbiBtb2JpbGUgYXBwcy5cclxuXHRcdHRoaXMuc3RhdHVzQmFyRWxtID0gdGhpcy5hZGRTdGF0dXNCYXJJdGVtKCk7XHJcblx0XHR0aGlzLmRpc3BsYXlNb2RlT25TdGF0dXNCYXIoKTtcclxuXHJcblx0XHQvLyBUaGlzIGFkZHMgYSBzaW1wbGUgY29tbWFuZCB0aGF0IGNhbiBiZSB0cmlnZ2VyZWQgYW55d2hlcmVcclxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XHJcblx0XHRcdGlkOiBcInRvZ2dsZVwiLFxyXG5cdFx0XHRuYW1lOiBcIlRvZ2dsZSBkaWdpdGFsIHBhcGVyIG1vZGVcIixcclxuXHRcdFx0Y2FsbGJhY2s6ICgpID0+IHtcclxuXHRcdFx0XHR0aGlzLnNldHRpbmdzLmVuYWJsZWQgPSAhdGhpcy5zZXR0aW5ncy5lbmFibGVkO1xyXG5cdFx0XHRcdHRoaXMuZGlzcGxheU1vZGVPblN0YXR1c0JhcigpO1xyXG5cdFx0XHRcdHRoaXMuc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdH0sXHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdGRpc3BsYXlNb2RlT25TdGF0dXNCYXIoKSB7XHJcblx0XHRpZiAodGhpcy5zZXR0aW5ncy5lbmFibGVkKSB7XHJcblx0XHRcdHRoaXMuc3RhdHVzQmFyRWxtLnNldFRleHQoXCJwYXBlclwiKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHRoaXMuc3RhdHVzQmFyRWxtLnNldFRleHQoXCJcIik7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRvbnVubG9hZCgpIHt9XHJcblxyXG5cdGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcclxuXHRcdHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKFxyXG5cdFx0XHR7fSxcclxuXHRcdFx0REVGQVVMVF9TRVRUSU5HUyxcclxuXHRcdFx0YXdhaXQgdGhpcy5sb2FkRGF0YSgpXHJcblx0XHQpO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgc2F2ZVNldHRpbmdzKCkge1xyXG5cdFx0YXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcclxuXHR9XHJcbn1cclxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUtPO0FBTVAsSUFBTSxtQkFBeUM7QUFBQSxFQUM5QyxTQUFTO0FBQ1Y7QUFFQSxJQUFJLFdBQStCO0FBRW5DLElBQXFCLGVBQXJCLGNBQTBDLHVCQUFPO0FBQUEsRUFJaEQsTUFBTSxTQUFTO0FBQ2QsVUFBTSxLQUFLLGFBQWE7QUFFeEIsU0FBSztBQUFBLE1BQ0osS0FBSyxJQUFJLFVBQVU7QUFBQSxRQUNsQjtBQUFBLFFBQ0EsQ0FBQyxRQUFnQixTQUF1QjtBQUN2QyxjQUNDLEtBQUssU0FBUyxXQUNkLGFBQWEsVUFDYixDQUFDLE9BQU8sU0FBUyxFQUFFLFdBQVcsUUFBUSxHQUNyQztBQUVELG1CQUFPLFNBQVMsUUFBUTtBQUFBLFVBQ3pCO0FBQ0EscUJBQVcsT0FBTyxTQUFTO0FBQUEsUUFDNUI7QUFBQSxNQUNEO0FBQUEsSUFDRDtBQUVBLFNBQUs7QUFBQSxNQUNKLEtBQUssSUFBSSxVQUFVO0FBQUEsUUFDbEI7QUFBQSxRQUNBLENBQUMsU0FBd0I7QUFDeEIsY0FBSSxLQUFLLEtBQUssWUFBWSxNQUFNLFlBQVk7QUFDM0MsdUJBQVcsS0FBSyxLQUFLLE9BQU8sU0FBUztBQUFBLFVBQ3RDO0FBQUEsUUFDRDtBQUFBLE1BQ0Q7QUFBQSxJQUNEO0FBR0EsU0FBSyxlQUFlLEtBQUssaUJBQWlCO0FBQzFDLFNBQUssdUJBQXVCO0FBRzVCLFNBQUssV0FBVztBQUFBLE1BQ2YsSUFBSTtBQUFBLE1BQ0osTUFBTTtBQUFBLE1BQ04sVUFBVSxNQUFNO0FBQ2YsYUFBSyxTQUFTLFVBQVUsQ0FBQyxLQUFLLFNBQVM7QUFDdkMsYUFBSyx1QkFBdUI7QUFDNUIsYUFBSyxhQUFhO0FBQUEsTUFDbkI7QUFBQSxJQUNELENBQUM7QUFBQSxFQUNGO0FBQUEsRUFFQSx5QkFBeUI7QUFDeEIsUUFBSSxLQUFLLFNBQVMsU0FBUztBQUMxQixXQUFLLGFBQWEsUUFBUSxPQUFPO0FBQUEsSUFDbEMsT0FBTztBQUNOLFdBQUssYUFBYSxRQUFRLEVBQUU7QUFBQSxJQUM3QjtBQUFBLEVBQ0Q7QUFBQSxFQUVBLFdBQVc7QUFBQSxFQUFDO0FBQUEsRUFFWixNQUFNLGVBQWU7QUFDcEIsU0FBSyxXQUFXLE9BQU87QUFBQSxNQUN0QixDQUFDO0FBQUEsTUFDRDtBQUFBLE1BQ0EsTUFBTSxLQUFLLFNBQVM7QUFBQSxJQUNyQjtBQUFBLEVBQ0Q7QUFBQSxFQUVBLE1BQU0sZUFBZTtBQUNwQixVQUFNLEtBQUssU0FBUyxLQUFLLFFBQVE7QUFBQSxFQUNsQztBQUNEOyIsCiAgIm5hbWVzIjogW10KfQo=
